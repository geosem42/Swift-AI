class h extends Error{constructor(t){super(t),this.name=this.constructor.name}}class p extends h{constructor(t,r){super(t),this.status=r}}function u(e){e instanceof p?console.error(`API Error (${e.status}): ${e.message}`):console.error(`Error: ${e.message}`)}function d(e){const t={};for(const r in e)t[r]=Array.isArray(e[r])?e[r]:[e[r]];return t}async function a(e){switch(e.status){case 200:case 201:return await e.json();case 400:throw new Error("400 Bad Request");case 401:throw new Error("401 Unauthorized");case 403:throw new Error("403 Forbidden");case 404:throw new Error("404 Not Found");case 422:throw await e.json();case 500:throw await e.json();default:throw new Error(`Received unexpected status code: ${e.status}`)}}async function f(){try{const e=await fetch("/csrf-token");return(await a(e)).csrfToken}catch(e){throw e}}async function w(e,t,r){if(!t||!r)throw{errors:{...!t&&{title:["Please enter a title."]},...!r&&{personality_id:["Please select a personality."]}},source:"frontend"};try{const o=await fetch("/new-conversation",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"},body:JSON.stringify({title:t,personality_id:r})});return await a(o)}catch(o){throw o}}async function l(e,t,r){if(!t)throw{errors:{message:["Please enter a message."]},source:"frontend"};try{const o=await fetch("/send-message",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"},body:JSON.stringify({message:t,conversation_id:r})});return await a(o)}catch(o){throw o}}async function y(e){const t=await fetch(`/get-messages/${e}`);return a(t)}async function m(){const e=await fetch("/get-conversations");return a(e)}async function T(){const e=await fetch("/personalities");return a(e)}async function g(e,t,r,o,n,i){if(!t)throw{errors:{prompt:["Please enter a prompt."]},source:"frontend"};try{const s=await fetch("/generate-image",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"},body:JSON.stringify({prompt:t,style:r,width:o,height:n,upscale:i})}),c=await a(s);return{original:c.original,upscaled:c.upscaled,prompt:t}}catch(s){throw s}}async function E(e){try{const t=await fetch(e);return await a(t)}catch(t){throw t}}async function C(e){try{const t=await fetch("/texttospeech/voices",{method:"GET",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"}});return await a(t)}catch(t){throw t}}async function O(e,t,r,o){if(!o||!t||!r)throw{errors:{...!o&&{message:["Please enter your message."]},...!t&&{language:["Please select a language."]},...!r&&{voice:["Please select a voice."]}},source:"frontend"};try{const n=await fetch("/texttospeech/generate",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"},body:JSON.stringify({language:t,voice:r,message:o})});return await a(n)}catch(n){throw n}}async function S(e=1){try{const t=await fetch(`/texttospeech/audiofiles?page=${e}`);return await a(t)}catch(t){throw t}}async function j(e,t){if(!e)throw{errors:{file:["Please select a file to upload."]},source:"frontend"};const r=new FormData;r.append("file",e);try{const o=await fetch("/document/upload",{method:"POST",headers:{"X-CSRF-TOKEN":t},body:r});return await a(o)}catch(o){throw console.error("Error:",o),o}}async function N(e,t=1){try{const r=await fetch(`/document/list?page=${t}`,{method:"GET",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":e,Accept:"application/json"}});return await a(r)}catch(r){throw r}}async function F(e,t){try{const r=await fetch(`/document/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":t}});return a(r)}catch(r){throw r}}async function P(e,t,r){try{const o=await fetch("/document/search",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":r},body:JSON.stringify({query:e,document_id:t})});return a(o)}catch(o){throw o}}async function A(e,t){try{const r=await fetch(`/document/history/${e}`,{method:"GET",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":t}});return a(r)}catch(r){throw r}}async function R(e,t){if(!e)throw{errors:{file:["Please select a file to upload."]},source:"frontend"};const r=new FormData;r.append("file",e);try{const o=await fetch("/speechtotext/transcribe",{method:"POST",headers:{"X-CSRF-TOKEN":t},body:r});return await a(o)}catch(o){throw o}}async function K(e,t=1){const r=await fetch(`/speechtotext/transcriptions?page=${t}`,{headers:{Accept:"application/json","Content-Type":"application/json","X-CSRF-TOKEN":e}});return a(r)}export{m as a,T as b,w as c,N as d,F as e,f,y as g,u as h,P as i,A as j,g as k,E as l,R as m,d as n,K as o,C as p,O as q,S as r,l as s,j as u};
